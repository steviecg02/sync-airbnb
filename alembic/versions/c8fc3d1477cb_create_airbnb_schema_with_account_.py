"""create airbnb schema with account foreign keys

Revision ID: c8fc3d1477cb
Revises: 
Create Date: 2025-10-20 15:57:09.534270

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'c8fc3d1477cb'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Create schema and TimescaleDB extension
    op.execute("CREATE SCHEMA IF NOT EXISTS airbnb")
    op.execute("CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('accounts',
    sa.Column('account_id', sa.String(), nullable=False),
    sa.Column('customer_id', sa.UUID(), nullable=True),
    sa.Column('airbnb_cookie', sa.Text(), nullable=False),
    sa.Column('x_airbnb_client_trace_id', sa.String(), nullable=False),
    sa.Column('x_client_version', sa.String(), nullable=False),
    sa.Column('user_agent', sa.Text(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('last_sync_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('account_id'),
    schema='airbnb'
    )
    op.create_index(op.f('ix_airbnb_accounts_account_id'), 'accounts', ['account_id'], unique=False, schema='airbnb')
    op.create_index(op.f('ix_airbnb_accounts_customer_id'), 'accounts', ['customer_id'], unique=False, schema='airbnb')
    op.create_index(op.f('ix_airbnb_accounts_is_active'), 'accounts', ['is_active'], unique=False, schema='airbnb')
    op.create_table('chart_query',
    sa.Column('account_id', sa.String(), nullable=False),
    sa.Column('time', sa.Date(), server_default=sa.text('now()::date'), nullable=False),
    sa.Column('airbnb_listing_id', sa.Text(), nullable=False),
    sa.Column('airbnb_internal_name', sa.Text(), nullable=True),
    sa.Column('metric_date', sa.Date(), nullable=False),
    sa.Column('conversion_rate_your_value', sa.Float(), nullable=True),
    sa.Column('conversion_rate_your_value_string', sa.Text(), nullable=True),
    sa.Column('conversion_rate_similar_value', sa.Float(), nullable=True),
    sa.Column('conversion_rate_similar_value_string', sa.Text(), nullable=True),
    sa.Column('p3_impressions_your_value', sa.Integer(), nullable=True),
    sa.Column('p3_impressions_your_value_string', sa.Text(), nullable=True),
    sa.Column('p3_impressions_similar_value', sa.Integer(), nullable=True),
    sa.Column('p3_impressions_similar_value_string', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['airbnb.accounts.account_id'], ),
    schema='airbnb'
    )
    op.create_index('ix_airbnb_chart_query_listing_date', 'chart_query', ['account_id', 'airbnb_listing_id', 'metric_date', 'time'], schema='airbnb')
    op.create_table('chart_summary',
    sa.Column('account_id', sa.String(), nullable=False),
    sa.Column('time', sa.Date(), server_default=sa.text('now()::date'), nullable=False),
    sa.Column('airbnb_listing_id', sa.Text(), nullable=False),
    sa.Column('airbnb_internal_name', sa.Text(), nullable=True),
    sa.Column('window_start', sa.Date(), nullable=False),
    sa.Column('window_end', sa.Date(), nullable=False),
    sa.Column('conversion_rate_value', sa.Float(), nullable=True),
    sa.Column('conversion_rate_value_string', sa.Text(), nullable=True),
    sa.Column('conversion_rate_value_change', sa.Float(), nullable=True),
    sa.Column('conversion_rate_value_change_string', sa.Text(), nullable=True),
    sa.Column('p2_impressions_first_page_rate_value', sa.Float(), nullable=True),
    sa.Column('p2_impressions_first_page_rate_value_string', sa.Text(), nullable=True),
    sa.Column('search_conversion_rate_value', sa.Float(), nullable=True),
    sa.Column('search_conversion_rate_value_string', sa.Text(), nullable=True),
    sa.Column('listing_conversion_rate_value', sa.Float(), nullable=True),
    sa.Column('listing_conversion_rate_value_string', sa.Text(), nullable=True),
    sa.Column('p3_impressions_value', sa.Integer(), nullable=True),
    sa.Column('p3_impressions_value_string', sa.Text(), nullable=True),
    sa.Column('p3_impressions_value_change', sa.Float(), nullable=True),
    sa.Column('p3_impressions_value_change_string', sa.Text(), nullable=True),
    sa.Column('p2_impressions_value', sa.Integer(), nullable=True),
    sa.Column('p2_impressions_value_string', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['airbnb.accounts.account_id'], ),
    schema='airbnb'
    )
    op.create_index('ix_airbnb_chart_summary_listing_date', 'chart_summary', ['account_id', 'airbnb_listing_id', 'window_start', 'time'], schema='airbnb')
    op.create_table('list_of_metrics',
    sa.Column('account_id', sa.String(), nullable=False),
    sa.Column('time', sa.Date(), server_default=sa.text('now()::date'), nullable=False),
    sa.Column('airbnb_listing_id', sa.Text(), nullable=False),
    sa.Column('airbnb_internal_name', sa.Text(), nullable=True),
    sa.Column('window_start', sa.Date(), nullable=False),
    sa.Column('window_end', sa.Date(), nullable=False),
    sa.Column('conversion_rate_value', sa.Float(), nullable=True),
    sa.Column('conversion_rate_value_string', sa.Text(), nullable=True),
    sa.Column('p2_impressions_first_page_rate_value', sa.Float(), nullable=True),
    sa.Column('p2_impressions_first_page_rate_value_string', sa.Text(), nullable=True),
    sa.Column('search_conversion_rate_value', sa.Float(), nullable=True),
    sa.Column('search_conversion_rate_value_string', sa.Text(), nullable=True),
    sa.Column('listing_conversion_rate_value', sa.Float(), nullable=True),
    sa.Column('listing_conversion_rate_value_string', sa.Text(), nullable=True),
    sa.Column('p3_impressions_value', sa.Integer(), nullable=True),
    sa.Column('p3_impressions_value_string', sa.Text(), nullable=True),
    sa.Column('p2_impressions_value', sa.Integer(), nullable=True),
    sa.Column('p2_impressions_value_string', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['airbnb.accounts.account_id'], ),
    schema='airbnb'
    )
    op.create_index('ix_airbnb_list_of_metrics_listing_date', 'list_of_metrics', ['account_id', 'airbnb_listing_id', 'window_start', 'time'], schema='airbnb')
    # ### end Alembic commands ###

    # Create TimescaleDB hypertables
    op.execute("SELECT create_hypertable('airbnb.chart_query', 'time', if_not_exists => TRUE)")
    op.execute("SELECT create_hypertable('airbnb.chart_summary', 'time', if_not_exists => TRUE)")
    op.execute("SELECT create_hypertable('airbnb.list_of_metrics', 'time', if_not_exists => TRUE)")

    # Add unique constraints for upsert logic
    op.create_unique_constraint(
        "uq_chart_query_listing_metric_date",
        "chart_query",
        ["account_id", "airbnb_listing_id", "metric_date", "time"],
        schema="airbnb"
    )
    op.create_unique_constraint(
        "uq_chart_summary_listing_window",
        "chart_summary",
        ["account_id", "airbnb_listing_id", "window_start", "time"],
        schema="airbnb"
    )
    op.create_unique_constraint(
        "uq_list_of_metrics_listing_window",
        "list_of_metrics",
        ["account_id", "airbnb_listing_id", "window_start", "time"],
        schema="airbnb"
    )


def downgrade() -> None:
    """Downgrade schema."""
    # Drop unique constraints first
    op.drop_constraint("uq_list_of_metrics_listing_window", "list_of_metrics", schema="airbnb", type_="unique")
    op.drop_constraint("uq_chart_summary_listing_window", "chart_summary", schema="airbnb", type_="unique")
    op.drop_constraint("uq_chart_query_listing_metric_date", "chart_query", schema="airbnb", type_="unique")

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_airbnb_list_of_metrics_listing_date', table_name='list_of_metrics', schema='airbnb')
    op.drop_table('list_of_metrics', schema='airbnb')
    op.drop_index('ix_airbnb_chart_summary_listing_date', table_name='chart_summary', schema='airbnb')
    op.drop_table('chart_summary', schema='airbnb')
    op.drop_index('ix_airbnb_chart_query_listing_date', table_name='chart_query', schema='airbnb')
    op.drop_table('chart_query', schema='airbnb')
    op.drop_index(op.f('ix_airbnb_accounts_is_active'), table_name='accounts', schema='airbnb')
    op.drop_index(op.f('ix_airbnb_accounts_customer_id'), table_name='accounts', schema='airbnb')
    op.drop_index(op.f('ix_airbnb_accounts_account_id'), table_name='accounts', schema='airbnb')
    op.drop_table('accounts', schema='airbnb')
    # ### end Alembic commands ###

    # Drop schema (will fail if other objects exist, which is intentional)
    op.execute("DROP SCHEMA IF EXISTS airbnb CASCADE")
