name: CI/CD

on:
  push:
    branches: [main, move-to-service]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sync_airbnb_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r dev-requirements.txt

      - name: Run ruff linter
        run: ruff check .

      - name: Run black formatter check
        run: black --check .

      - name: Run mypy type checker
        run: mypy sync_airbnb/
        continue-on-error: true  # Don't fail CI on mypy errors yet

      - name: Set up test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sync_airbnb_test
          MODE: admin  # Set to admin mode to avoid requiring ACCOUNT_ID
        run: |
          # Run migrations
          alembic upgrade head

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sync_airbnb_test
          MODE: admin  # Set to admin mode to avoid requiring ACCOUNT_ID
          # Dummy credentials for tests (not actually used, but required by config.py)
          AIRBNB_COOKIE: "test_cookie"
          X_CLIENT_VERSION: "test_version"
          X_AIRBNB_CLIENT_TRACE_ID: "test_trace_id"
          USER_AGENT: "test_user_agent"
        run: |
          pytest --cov=sync_airbnb --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=main-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
